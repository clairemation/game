var App =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// DOM resources ===================================\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar canvas = document.getElementById(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\n\nctx.mozImageSmoothingEnabled = false;\nctx.webkitImageSmoothingEnabled = false;\nctx.msImageSmoothingEnabled = false;\nctx.imageSmoothingEnabled = false;\n\nctx.fillStyle = \"#000\";\nctx.fillRect(0, 0, 320, 240);\nctx.fillStyle = \"#fff\";\nctx.font = \"16px PressStart2P\";\nctx.fillText(\"Loading...\", 50, 50);\n\nvar bg1 = document.getElementById(\"bg1\");\nvar fg1 = document.getElementById(\"fg1\");\nvar scoreboard = document.getElementById(\"scoreboard\");\nvar messageWindow = document.getElementById(\"message\");\n\nvar assets = {};\n\nassets.flapAudio = new Audio();\nassets.flapAudio.playbackRate = 4;\nassets.crunchAudio = new Audio();\nassets.crunch2Audio = new Audio();\nassets.crunch2Audio.playbackRate = 2;\nassets.blopAudio = new Audio();\nassets.blopAudio.playbackRate = 0.5;\nassets.screechAudio = new Audio();\nassets.titlescreen = new Image();\nassets.sprite = new Image();\n\n// Audio setup ======================================\n\nvar audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n\nvar flapSrc = audioCtx.createMediaElementSource(assets.flapAudio);\nflapSrc.connect(audioCtx.destination);\n\nvar crunchSrc = audioCtx.createMediaElementSource(assets.crunchAudio);\ncrunchSrc.connect(audioCtx.destination);\n\nvar crunch2Src = audioCtx.createMediaElementSource(assets.crunch2Audio);\ncrunch2Src.connect(audioCtx.destination);\n\nvar blopSrc = audioCtx.createMediaElementSource(assets.blopAudio);\nblopSrc.connect(audioCtx.destination);\n\nvar screechSrc = audioCtx.createMediaElementSource(assets.screechAudio);\nscreechSrc.connect(audioCtx.destination);\n\nvar assetSrcs = {\n    titlescreen: \"assets/titlescreen.png\",\n    sprite: \"assets/spritesheets/sheet00.png\",\n    flapAudio: \"assets/flap.wav\",\n    crunchAudio: \"assets/crunch.wav\",\n    crunch2Audio: \"assets/crunch2.wav\",\n    screechAudio: \"assets/pusou.wav\",\n    blopAudio: \"assets/blop.wav\"\n};\n\nfunction loadPromise(asset, src) {\n    return new Promise(function (res, rej) {\n        asset.onload = res;\n        asset.onerror = res;\n        asset.oncanplaythrough = res;\n        asset.src = src;\n    });\n}\n\nvar assetPromises = [];\n\nfor (name in assets) {\n    assetPromises.push(loadPromise(assets[name], assetSrcs[name]));\n}\n\nPromise.all(assetPromises).then(function (val) {\n    console.log(\"asdf\");\n    ctx.drawImage(assets.titlescreen, 0, 0);\n});\n\n// Constants ========================================\n\nvar ANIM_FRAMERATE = 200;\nvar SPRITE_WIDTH = 48;\nvar SPRITE_HEIGHT = 48;\nvar GROUND = 176;\n\n// =================================================\n\n// Globals =========================================\n\nvar fgScrollSpeed = 0.12;\nvar obstacleFrequency = 0.2;\nvar sprite = new Image();\nvar loop;\nvar currentScore = 0;\nvar currentTime;\nvar lastTime = 0;\n\n// =================================================\n\n// Base Classes =======================\n\nvar State = function () {\n    function State() {\n        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, State);\n\n        Object.assign(this, args);\n    }\n\n    _createClass(State, [{\n        key: \"enter\",\n        value: function enter() {\n            //Override\n        }\n    }, {\n        key: \"exit\",\n        value: function exit() {\n            //Override\n        }\n    }, {\n        key: \"message\",\n        value: function message(msg) {\n            //Override\n        }\n    }, {\n        key: \"update\",\n        value: function update(deltaTime) {\n            //Override\n        }\n    }]);\n\n    return State;\n}();\n\nvar Control = function () {\n    function Control() {\n        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, Control);\n\n        Object.assign(this, args);\n    }\n\n    _createClass(Control, [{\n        key: \"update\",\n        value: function update(deltaTime) {\n            //Override\n        }\n    }]);\n\n    return Control;\n}();\n\nvar sharedStates = {\n    updateAllControls: new State({\n        update: function update(dt) {\n            for (var controlName in this.controls) {\n                this.controls[controlName].update(dt);\n            }\n        }\n    })\n};\n\nvar GameObject = function () {\n    function GameObject() {\n        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, GameObject);\n\n        this.name = 'GameObject';\n        this.controls = {};\n        this.states = {\n            default: sharedStates.updateAllControls\n        };\n        this.currentState = this.states.default;\n        Object.assign(this, args);\n    }\n\n    _createClass(GameObject, [{\n        key: \"update\",\n        value: function update(dt) {\n            this.currentState.update.call(this, dt);\n        }\n    }, {\n        key: \"message\",\n        value: function message(msg) {\n            this.currentState.message.call(this, msg);\n        }\n    }, {\n        key: \"changeState\",\n        value: function changeState(newState) {\n            this.currentState.exit.call(this, newState);\n            newState.enter.call(this, this.currentState);\n            this.currentState = newState;\n        }\n    }]);\n\n    return GameObject;\n}();\n\n// GAME OBJECT ======================================\n\nvar game = new GameObject({ name: \"Game\" });\n\n// Game object controls =============================\n\ngame.controls.playControl = new Control({\n    components: [],\n    update: function update(dt) {\n        for (var i = 0; i < this.components.length; i++) {\n            this.components[i].update(dt);\n        }\n    }\n});\n\n// =================================================\n\n// Game object states ===========================\n\nvar titleScreen = new State({\n    enter: function enter() {\n        var _this = this;\n\n        cancelAnimationFrame(loop);\n        fg1.style.visibility = \"hidden\";\n        scoreboard.style.visibility = \"hidden\";\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(0, 0, 320, 240);\n        var startGame = function startGame() {\n            console.log(_this);\n            _this.changeState(play);\n            document.removeEventListener(\"click\", startGame);\n        };\n        document.addEventListener(\"click\", startGame);\n    }\n});\n\nvar play = new State({\n    enter: function enter() {\n        fg1.style.visibility = \"visible\";\n        bg1.style.visibility = \"visible\";\n        scoreboard.style.visibility = \"visible\";\n        loop = requestAnimationFrame(tick);\n    },\n    message: function message(msg) {\n        var _this2 = this;\n\n        switch (msg) {\n            case \"lose\":\n                setTimeout(function () {\n                    _this2.changeState(lose);\n                }, 400);\n        }\n    },\n    update: function update(dt) {\n        this.controls.playControl.update(dt);\n    }\n});\n\nvar pause = new State({\n    enter: function enter() {\n        cancelAnimationFrame(loop);\n    }\n});\n\nvar lose = new State({\n    enter: function enter() {\n        cancelAnimationFrame(loop);\n        messageWindow.style.visibility = \"visible\";\n        messageWindow.innerHTML = \"<p style='text-align: center; line-height: 30px'>Final score: \" + Math.floor(currentScore) + \"<br/>SPACE to restart</p>\";\n    }\n\n});\n\n// =================================================\n\nvar GameplayObject = function (_GameObject) {\n    _inherits(GameplayObject, _GameObject);\n\n    function GameplayObject(args) {\n        _classCallCheck(this, GameplayObject);\n\n        var _this3 = _possibleConstructorReturn(this, (GameplayObject.__proto__ || Object.getPrototypeOf(GameplayObject)).call(this, args));\n\n        game.controls.playControl.components.push(_this3);\n        return _this3;\n    }\n\n    return GameplayObject;\n}(GameObject);\n\n// GameplayObject Controls ==============================\n\nvar Sprite = function (_Control) {\n    _inherits(Sprite, _Control);\n\n    function Sprite() {\n        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, Sprite);\n\n        var _this4 = _possibleConstructorReturn(this, (Sprite.__proto__ || Object.getPrototypeOf(Sprite)).call(this, args));\n\n        _this4.engine = gameEnginesObject.spriteEngine;\n        _this4.currentFrameNum = 0;\n        _this4.elapsedTime = 0;\n        _this4.looping = true;\n        _this4.finished = false;\n        _this4.onFinished = function () {};\n        return _this4;\n    }\n\n    _createClass(Sprite, [{\n        key: \"update\",\n        value: function update(dt) {\n            this.advanceFrame(dt);\n        }\n    }, {\n        key: \"advanceFrame\",\n        value: function advanceFrame(dt) {\n            this.elapsedTime += dt;\n            if (this.looping) {\n                this.elapsedTime = this.elapsedTime % (this.numFrames * ANIM_FRAMERATE);\n            } else if (!this.finished) {\n                if (this.elapsedTime >= this.numFrames * ANIM_FRAMERATE) {\n                    this.onFinished();\n                    this.finished = true;\n                }\n            }\n            this.currentFrameNum = Math.floor(this.elapsedTime / ANIM_FRAMERATE);\n            this.currentFrame = this.currentAnimation[this.currentFrameNum];\n        }\n    }, {\n        key: \"setCurrentAnimation\",\n        value: function setCurrentAnimation(name) {\n            var looping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n            var onFinished = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\n\n            this.looping = looping;\n            this.finished = false;\n            this.onFinished = onFinished;\n            if (this.currentAnimation != this.animations[name]) {\n                this.currentAnimation = this.animations[name];\n                this.currentFrameNum = 0;\n                this.currentFrame = this.currentAnimation[this.currentFrameNum];\n                this.numFrames = this.currentAnimation.length;\n                this.elapsedTime = 0;\n            }\n        }\n    }]);\n\n    return Sprite;\n}(Control);\n\nvar Collider = function (_Control2) {\n    _inherits(Collider, _Control2);\n\n    function Collider(args) {\n        _classCallCheck(this, Collider);\n\n        var _this5 = _possibleConstructorReturn(this, (Collider.__proto__ || Object.getPrototypeOf(Collider)).call(this, args));\n\n        _this5.hitBox = _this5.hitBox || [20, 30, 33, 48];\n        return _this5;\n    }\n\n    _createClass(Collider, [{\n        key: \"onHit\",\n        value: function onHit(other) {\n            // Override\n        }\n    }]);\n\n    return Collider;\n}(Control);\n\nvar CollisionReceiver = function (_Control3) {\n    _inherits(CollisionReceiver, _Control3);\n\n    function CollisionReceiver(args) {\n        _classCallCheck(this, CollisionReceiver);\n\n        var _this6 = _possibleConstructorReturn(this, (CollisionReceiver.__proto__ || Object.getPrototypeOf(CollisionReceiver)).call(this, args));\n\n        _this6.engine = gameEnginesObject.collisionEngine;\n        return _this6;\n    }\n\n    _createClass(CollisionReceiver, [{\n        key: \"onHit\",\n        value: function onHit(other) {\n            // Override\n        }\n    }]);\n\n    return CollisionReceiver;\n}(Control);\n\nvar Transform = function (_Control4) {\n    _inherits(Transform, _Control4);\n\n    function Transform(args) {\n        _classCallCheck(this, Transform);\n\n        var _this7 = _possibleConstructorReturn(this, (Transform.__proto__ || Object.getPrototypeOf(Transform)).call(this, args));\n\n        _this7.position = _this7.position || [0, GROUND - SPRITE_HEIGHT];\n        _this7.pivot = _this7.pivot || [SPRITE_WIDTH / 2, SPRITE_HEIGHT];\n        _this7.center = _this7.center || [SPRITE_WIDTH / 2, SPRITE_HEIGHT / 2];\n        return _this7;\n    }\n\n    return Transform;\n}(Control);\n\nvar Scroller = function (_Control5) {\n    _inherits(Scroller, _Control5);\n\n    function Scroller(args) {\n        _classCallCheck(this, Scroller);\n\n        var _this8 = _possibleConstructorReturn(this, (Scroller.__proto__ || Object.getPrototypeOf(Scroller)).call(this, args));\n\n        _this8.reset();\n        return _this8;\n    }\n\n    _createClass(Scroller, [{\n        key: \"reset\",\n        value: function reset() {\n            this.xScroll = 0;\n        }\n    }, {\n        key: \"update\",\n        value: function update(dt) {\n            this.xScroll = this.xScroll + fgScrollSpeed * dt;\n            this.owner.controls.transform.position[0] = 320 - this.xScroll;\n        }\n    }]);\n\n    return Scroller;\n}(Control);\n\nvar ObstaclePooler = function (_Control6) {\n    _inherits(ObstaclePooler, _Control6);\n\n    function ObstaclePooler(args) {\n        _classCallCheck(this, ObstaclePooler);\n\n        return _possibleConstructorReturn(this, (ObstaclePooler.__proto__ || Object.getPrototypeOf(ObstaclePooler)).call(this, args));\n    }\n\n    _createClass(ObstaclePooler, [{\n        key: \"activate\",\n        value: function activate() {\n            this.owner.changeState(activeObstacle);\n        }\n    }, {\n        key: \"deactivate\",\n        value: function deactivate() {\n            gameEnginesObject.controls.obstaclePoolEngine.returnToPool(this);\n            this.owner.changeState(inactiveObstacle);\n        }\n    }, {\n        key: \"update\",\n        value: function update(dt) {\n            if (this.owner.controls.transform.position[0] < -SPRITE_WIDTH - 1) {\n                this.deactivate();\n            }\n        }\n    }]);\n\n    return ObstaclePooler;\n}(Control);\n\n// =================================================\n\n// Game Object declarations ========================\n\nvar player = new GameplayObject({ name: \"Player\" });\nvar gameEnginesObject = new GameplayObject({ name: \"GameEnginesObject\" });\nvar fern1 = new GameplayObject({ name: \"Fern1\" });\nvar fern2 = new GameplayObject({ name: \"Fern2\" });\nvar fern3 = new GameplayObject({ name: \"Fern3\" });\nvar fern4 = new GameplayObject({ name: \"Fern4\" });\nvar fern5 = new GameplayObject({ name: \"Fern5\" });\nvar proto1 = new GameplayObject({ name: \"Proto1\" });\nvar proto2 = new GameplayObject({ name: \"Proto2\" });\nvar proto3 = new GameplayObject({ name: \"Proto3\" });\nvar scoreCounter = new GameplayObject({ name: \"Score\" });\nvar message = new GameplayObject({ name: \"MessageWindow\" });\n\n// =================================================\n\n// Score controls ===================================\n\nvar nextScoreMilestone = 50;\n\nscoreCounter.controls.incrementControl = new Control({\n    owner: scoreCounter,\n    increment: function increment(amt) {\n        currentScore += amt;\n        scoreboard.innerHTML = \"SCORE:\\n\" + Math.floor(currentScore);\n        if (currentScore > nextScoreMilestone) {\n            fgScrollSpeed += 0.01;\n            obstacleFrequency = Math.max(obstacleFrequency - 0.01, 0.04);\n            nextScoreMilestone += 50;\n        }\n    }\n});\n\n// =================================================\n\n\n// Player object controls ===========================\n\nplayer.controls.transform = new Transform({\n    owner: player,\n    position: [40, 125]\n});\n\nplayer.controls.sprite = new Sprite({\n    owner: player,\n    animations: {\n        stand: [7],\n        walk: [11, 12],\n        jump: [5],\n        fall: [6],\n        glide: [7, 8],\n        hurt: [9],\n        pounce: [10]\n    }\n});\n\nplayer.controls.collisionReceiver = new CollisionReceiver({\n    owner: player,\n    hitBox: [20, 26, 40, 40],\n    onHit: function onHit(other) {\n        // if (other.owner.controls.transform.position[1] > this.owner.controls.transform.position[1]){\n        this.owner.message(\"pounce\", other);\n        // } else {\n        // this.owner.message(\"hurt\", other)\n        // }\n    }\n});\n\nplayer.controls.altitude = new Control({\n    owner: player,\n    yAccel: 0,\n    gliding: false,\n    startJump: function startJump() {\n        this.yAccel -= 9;\n        this.gliding = true;\n    },\n    bounce: function bounce() {\n        this.yAccel = -7;\n        this.gliding = false;\n    },\n    flap: function flap() {\n        this.yAccel -= this.yAccel * 0.9;\n        this.gliding = true;\n        this.owner.controls.sprite.setCurrentAnimation(\"jump\");\n        assets.flapAudio.play();\n    },\n    fall: function fall() {\n        this.gliding = false;\n        this.owner.controls.sprite.setCurrentAnimation(\"fall\");\n    },\n    move: function move(dt) {\n        this.yAccel = Math.max(this.yAccel, -9);\n        this.owner.controls.transform.position[1] += this.yAccel * (dt / 30);\n        // if (this.gliding && this.yAccel > 0){\n        //     this.owner.controls.sprite.setCurrentAnimation(\"glide\")\n        //     this.yAccel = (dt / 30)\n        // } else {\n        this.yAccel += 0.45 * (dt / 30);\n        // }\n        if (this.owner.controls.transform.position[1] >= GROUND - SPRITE_HEIGHT / 2) {\n            this.owner.controls.sprite.setCurrentAnimation(\"hurt\");\n            this.yAccel = 1.5;\n            assets.blopAudio.play();\n            game.message(\"lose\");\n        }\n    }\n});\n\n// =================================================\n\n// Player object states =========================\n\nvar walk = new State({\n    enter: function enter() {\n        this.controls.sprite.setCurrentAnimation(\"walk\");\n    },\n    message: function message(msg) {\n        switch (msg) {\n            case \"jump\":\n                this.changeState(jump);\n                break;\n            case \"hurt\":\n                this.changeState(hurt);\n                break;\n        }\n    },\n    update: function update(dt) {\n        this.controls.sprite.update(dt);\n    }\n});\n\nvar jump = new State({\n    enter: function enter() {\n        this.controls.sprite.setCurrentAnimation(\"jump\");\n        this.controls.altitude.startJump();\n    },\n    message: function message(msg, e) {\n        switch (msg) {\n            case \"jump\":\n                this.controls.altitude.flap();\n                break;\n            case \"fall\":\n                this.controls.altitude.fall();\n                break;\n            case \"hurt\":\n                this.changeState(hurt);\n                break;\n            case \"pounce\":\n                this.controls.sprite.setCurrentAnimation(\"pounce\");\n                this.controls.altitude.bounce();\n        }\n    },\n    update: function update(dt) {\n        this.controls.altitude.move(dt);\n        this.controls.sprite.update(dt);\n    }\n});\n\nvar hurt = new State({\n    enter: function enter() {\n        assets.screechAudio.play();\n        this.controls.altitude.bounce();\n        this.controls.sprite.setCurrentAnimation(\"hurt\");\n        game.message(\"lose\");\n    },\n    message: function message(msg) {},\n    update: function update(dt) {\n        this.controls.altitude.move(dt);\n        this.controls.sprite.update(dt);\n    }\n});\n\n// =================================================\n\n// Fern controls ====================================\n\n// TODO: Make Fern class\n\nfunction fernOnHit() {\n    if (player.currentState == jump && player.controls.transform.position[1] < this.owner.controls.transform.position[1]) {\n        this.owner.changeState(deadEnemy);\n        assets.crunch2Audio.play();\n    }\n}\n\nfern1.controls.sprite = new Sprite({\n    owner: fern1,\n    animations: {\n        default: [1],\n        dead: [0]\n    }\n});\nfern1.controls.collider = new Collider({ owner: fern1, onHit: fernOnHit });\nfern1.controls.transform = new Transform({ owner: fern1 });\nfern1.controls.scroller = new Scroller({ owner: fern1 });\nfern1.controls.obstaclePooler = new ObstaclePooler({ owner: fern1 });\n\nfern2.controls.sprite = new Sprite({\n    owner: fern2,\n    animations: {\n        default: [1],\n        dead: [0]\n    }\n});\nfern2.controls.collider = new Collider({ owner: fern2, onHit: fernOnHit });\nfern2.controls.transform = new Transform({ owner: fern2 });\nfern2.controls.scroller = new Scroller({ owner: fern2 });\nfern2.controls.obstaclePooler = new ObstaclePooler({ owner: fern2 });\n\nfern3.controls.sprite = new Sprite({\n    owner: fern3,\n    animations: {\n        default: [1],\n        dead: [0]\n    }\n});\nfern3.controls.collider = new Collider({ owner: fern3, onHit: fernOnHit });\nfern3.controls.transform = new Transform({ owner: fern3 });\nfern3.controls.scroller = new Scroller({ owner: fern3 });\nfern3.controls.obstaclePooler = new ObstaclePooler({ owner: fern3 });\n\nfern4.controls.sprite = new Sprite({\n    owner: fern4,\n    animations: {\n        default: [1],\n        dead: [0]\n    }\n});\nfern4.controls.collider = new Collider({ owner: fern4, onHit: fernOnHit });\nfern4.controls.transform = new Transform({ owner: fern4 });\nfern4.controls.scroller = new Scroller({ owner: fern4 });\nfern4.controls.obstaclePooler = new ObstaclePooler({ owner: fern4 });\n\nfern5.controls.sprite = new Sprite({\n    owner: fern5,\n    animations: {\n        default: [1],\n        dead: [0]\n    }\n});\nfern5.controls.collider = new Collider({ owner: fern5, onHit: fernOnHit });\nfern5.controls.transform = new Transform({ owner: fern5 });\nfern5.controls.scroller = new Scroller({ owner: fern5 });\nfern5.controls.obstaclePooler = new ObstaclePooler({ owner: fern5 });\n\n// =================================================\n\n// Proto controls ===================================\n\n// TODO: Make protoceratops class\n\nfunction protoOnHit() {\n    if (player.currentState == jump && player.controls.transform.position[1] < this.owner.controls.transform.position[1]) {\n        this.owner.changeState(deadEnemy);\n        assets.crunchAudio.play();\n    }\n}\n\nproto1.controls.sprite = new Sprite({\n    owner: proto1,\n    animations: {\n        default: [4],\n        dead: [2, 3]\n    }\n});\nproto1.controls.collider = new Collider({\n    owner: proto1,\n    hitbox: [3, 31, 31, 48],\n    onHit: protoOnHit\n});\nproto1.controls.transform = new Transform({ owner: proto1 });\nproto1.controls.scroller = new Scroller({ owner: proto1 });\nproto1.controls.obstaclePooler = new ObstaclePooler({ owner: proto1 });\n\nproto2.controls.sprite = new Sprite({\n    owner: proto2,\n    animations: {\n        default: [4],\n        dead: [2, 3]\n    }\n});\nproto2.controls.collider = new Collider({\n    owner: proto2,\n    hitbox: [3, 31, 31, 48],\n    onHit: protoOnHit\n});\nproto2.controls.transform = new Transform({ owner: proto2 });\nproto2.controls.scroller = new Scroller({ owner: proto2 });\nproto2.controls.obstaclePooler = new ObstaclePooler({ owner: proto2 });\n\nproto3.controls.sprite = new Sprite({\n    owner: proto3,\n    animations: {\n        default: [4],\n        dead: [2, 3]\n    }\n});\nproto3.controls.collider = new Collider({\n    owner: proto3,\n    hitbox: [3, 31, 31, 48],\n    onHit: protoOnHit\n});\nproto3.controls.transform = new Transform({ owner: proto3 });\nproto3.controls.scroller = new Scroller({ owner: proto3 });\nproto3.controls.obstaclePooler = new ObstaclePooler({ owner: proto3 });\n\n// =================================================\n\n// Fern states ==================================\n\nvar activeObstacle = new State({\n    enter: function enter() {\n        this.controls.sprite.setCurrentAnimation(\"default\");\n        this.controls.scroller.reset();\n    },\n    update: function update(dt) {\n        this.controls.scroller.update(dt);\n        this.controls.obstaclePooler.update(dt);\n    }\n});\n\nvar inactiveObstacle = new State({\n    enter: function enter() {\n        this.controls.transform.position = [-SPRITE_WIDTH, GROUND - SPRITE_HEIGHT];\n        gameEnginesObject.controls.obstaclePoolEngine.returnToPool();\n    }\n});\n\nvar deadEnemy = new State({\n    enter: function enter() {\n        this.controls.sprite.setCurrentAnimation(\"dead\", false);\n        scoreCounter.controls.incrementControl.increment(10);\n    },\n    update: function update(dt) {\n        this.controls.scroller.update(dt);\n        this.controls.obstaclePooler.update(dt);\n        this.controls.sprite.update(dt);\n    }\n});\n// =================================================\n\n// Game engine controls =============================\n\n// TODO: Optimize\ngameEnginesObject.controls.obstaclePoolEngine = new Control({\n    owner: gameEnginesObject,\n    nextObjectPlacementTime: 0,\n    activeComponents: [],\n    inactiveComponents: [fern1.controls.obstaclePooler, fern2.controls.obstaclePooler, fern3.controls.obstaclePooler, fern4.controls.obstaclePooler, fern5.controls.obstaclePooler, proto1.controls.obstaclePooler, proto2.controls.obstaclePooler, proto3.controls.obstaclePooler],\n    returnToPool: function returnToPool(obj) {\n        this.activeComponents.splice(this.activeComponents.indexOf(obj), 1);\n        this.inactiveComponents.push(obj);\n    },\n    update: function update(dt) {\n        if (currentTime >= this.nextObjectPlacementTime) {\n            var rand = Math.random();\n            if (rand < obstacleFrequency) {\n                var r = Math.floor(Math.random() * (this.inactiveComponents.length - 1));\n                var obj = this.inactiveComponents.splice(r, 1)[0];\n                if (obj) {\n                    this.activeComponents.push(obj);\n                    obj.activate();\n                    this.nextObjectPlacementTime = currentTime + 300;\n                }\n            }\n        }\n    }\n});\n\ngameEnginesObject.controls.spriteEngine = new Control({\n    owner: gameEnginesObject,\n    components: [player.controls.sprite, fern1.controls.sprite, fern2.controls.sprite, fern3.controls.sprite, fern4.controls.sprite, fern5.controls.sprite, proto1.controls.sprite, proto2.controls.sprite, proto3.controls.sprite],\n    update: function update(dt) {\n        ctx.clearRect(0, 0, 320, 240);\n        for (var i = 0; i < this.components.length; i++) {\n            var position = this.components[i].owner.controls.transform.position;\n            var frame = this.components[i].currentFrame;\n            ctx.drawImage(assets.sprite, frame * SPRITE_WIDTH, 0, SPRITE_WIDTH, SPRITE_HEIGHT, position[0], position[1], SPRITE_WIDTH, SPRITE_HEIGHT);\n        }\n    }\n});\n\nfunction isColliding(a, b) {\n\n    // If a is above b\n    if (a[3] < b[1]) {\n        return false;\n    }\n\n    // If a is below b\n    if (a[1] > b[3]) {\n        return false;\n    }\n\n    // If a is left of b\n    if (a[2] < b[0]) {\n        return false;\n    }\n\n    // If a is right of b\n    if (a[0] > b[2]) {\n        return false;\n    }\n\n    // Else collision\n    return true;\n}\n\ngameEnginesObject.controls.collisionEngine = new Control({\n    owner: gameEnginesObject,\n    playerCollider: player.controls.collisionReceiver,\n    components: [fern1.controls.collider, fern2.controls.collider, fern3.controls.collider, fern4.controls.collider, fern5.controls.collider, proto1.controls.collider, proto2.controls.collider, proto3.controls.collider],\n    update: function update(dt) {\n        var playerBox;\n        var otherBox;\n        var playerPos;\n        var otherPos;\n        var playerBound = [];\n        var otherBound = [];\n        for (var i = 0; i < this.components.length; i++) {\n            playerBox = this.playerCollider.hitBox;\n            playerPos = this.playerCollider.owner.controls.transform.position;\n            playerBound[0] = playerBox[0] + playerPos[0];\n            playerBound[2] = playerBox[2] + playerPos[0];\n            playerBound[1] = playerBox[1] + playerPos[1];\n            playerBound[3] = playerBox[3] + playerPos[1];\n\n            otherBox = this.components[i].hitBox;\n            otherPos = this.components[i].owner.controls.transform.position;\n            otherBound[0] = otherBox[0] + otherPos[0];\n            otherBound[2] = otherBox[2] + otherPos[0];\n            otherBound[1] = otherBox[1] + otherPos[1];\n            otherBound[3] = otherBox[3] + otherPos[1];\n\n            if (isColliding(playerBound, otherBound)) {\n                player.controls.collisionReceiver.onHit(this.components[i]);\n                this.components[i].onHit();\n            }\n        }\n    }\n});\n\n// =================================================\n\n// State assignments ============================\n\ngame.changeState(titleScreen);\nplayer.changeState(jump);\nplayer.controls.altitude.gliding = false;\nfern1.changeState(inactiveObstacle);\nfern2.changeState(inactiveObstacle);\nfern3.changeState(inactiveObstacle);\nfern4.changeState(inactiveObstacle);\nfern5.changeState(inactiveObstacle);\nproto1.changeState(inactiveObstacle);\nproto2.changeState(inactiveObstacle);\nproto3.changeState(inactiveObstacle);\n\n// =================================================\n\n\n// Key listeners ===================================\n\nvar keyDown = false;\n\ndocument.addEventListener(\"keydown\", function (e) {\n    if (keyDown == false && e.keyCode == 32) {\n        if (game.currentState == lose) {\n            restart();\n        } else {\n            player.message(\"jump\");\n            keyDown = true;\n        }\n    }\n});\n\ndocument.addEventListener(\"keyup\", function (e) {\n    if (keyDown == true && e.keyCode == 32) {\n        player.message(\"fall\");\n        keyDown = false;\n    }\n});\n\ndocument.addEventListener(\"touchstart\", function (e) {\n    if (keyDown == false) {\n        if (game.currentState == lose) {\n            restart();\n        } else {\n            player.message(\"jump\");\n            keyDown = true;\n        }\n    }\n});\n\ndocument.addEventListener(\"touchend\", function (e) {\n    if (keyDown == true) {\n        player.message(\"fall\");\n        keyDown = false;\n    }\n});\n\n// =================================================\n\n// Game loop =======================================\n\nvar bgX = 0;\nvar fgX = 0;\n\nfunction tick(timestamp) {\n    loop = requestAnimationFrame(tick);\n    if (!lastTime) {\n        lastTime = timestamp;\n    }\n    var dt = timestamp - lastTime;\n    currentTime = timestamp;\n    game.update(dt);\n    lastTime = timestamp;\n    bgX = (bgX - 3 * (dt / 30)) % 640;\n    bg1.style.left = bgX + \"px\";\n    fgX = (fgX - fgScrollSpeed * dt * 2) % 640;\n    fg1.style.left = fgX + \"px\";\n}\n\nfunction restart() {\n    lastTime = null;\n    currentScore = 0;\n    obstacleFrequency = 0.2;\n    fgScrollSpeed = 0.12;\n    nextScoreMilestone = 50;\n    scoreboard.innerHTML = \"SCORE: \" + Math.floor(currentScore);\n    player.controls.transform.position = [40, 125];\n    game.changeState(play);\n    player.changeState(jump);\n    player.controls.altitude.gliding = false;\n    messageWindow.style.visibility = \"hidden\";\n    game.changeState(play);\n    loop = requestAnimationFrame(tick);\n}\n\n// =================================================\n\n// Start ============================================\n\n\n// =================================================\n\n// Export module ===================================\n\nmodule.exports = { GameObject: GameObject };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJjYW52YXMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY3R4IiwiZ2V0Q29udGV4dCIsIm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCIsIndlYmtpdEltYWdlU21vb3RoaW5nRW5hYmxlZCIsIm1zSW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJmb250IiwiZmlsbFRleHQiLCJiZzEiLCJmZzEiLCJzY29yZWJvYXJkIiwibWVzc2FnZVdpbmRvdyIsImFzc2V0cyIsImZsYXBBdWRpbyIsIkF1ZGlvIiwicGxheWJhY2tSYXRlIiwiY3J1bmNoQXVkaW8iLCJjcnVuY2gyQXVkaW8iLCJibG9wQXVkaW8iLCJzY3JlZWNoQXVkaW8iLCJ0aXRsZXNjcmVlbiIsIkltYWdlIiwic3ByaXRlIiwiYXVkaW9DdHgiLCJ3aW5kb3ciLCJBdWRpb0NvbnRleHQiLCJ3ZWJraXRBdWRpb0NvbnRleHQiLCJmbGFwU3JjIiwiY3JlYXRlTWVkaWFFbGVtZW50U291cmNlIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwiY3J1bmNoU3JjIiwiY3J1bmNoMlNyYyIsImJsb3BTcmMiLCJzY3JlZWNoU3JjIiwiYXNzZXRTcmNzIiwibG9hZFByb21pc2UiLCJhc3NldCIsInNyYyIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJvbmxvYWQiLCJvbmVycm9yIiwib25jYW5wbGF5dGhyb3VnaCIsImFzc2V0UHJvbWlzZXMiLCJuYW1lIiwicHVzaCIsImFsbCIsInRoZW4iLCJjb25zb2xlIiwibG9nIiwiZHJhd0ltYWdlIiwiQU5JTV9GUkFNRVJBVEUiLCJTUFJJVEVfV0lEVEgiLCJTUFJJVEVfSEVJR0hUIiwiR1JPVU5EIiwiZmdTY3JvbGxTcGVlZCIsIm9ic3RhY2xlRnJlcXVlbmN5IiwibG9vcCIsImN1cnJlbnRTY29yZSIsImN1cnJlbnRUaW1lIiwibGFzdFRpbWUiLCJTdGF0ZSIsImFyZ3MiLCJPYmplY3QiLCJhc3NpZ24iLCJtc2ciLCJkZWx0YVRpbWUiLCJDb250cm9sIiwic2hhcmVkU3RhdGVzIiwidXBkYXRlQWxsQ29udHJvbHMiLCJ1cGRhdGUiLCJkdCIsImNvbnRyb2xOYW1lIiwiY29udHJvbHMiLCJHYW1lT2JqZWN0Iiwic3RhdGVzIiwiZGVmYXVsdCIsImN1cnJlbnRTdGF0ZSIsImNhbGwiLCJtZXNzYWdlIiwibmV3U3RhdGUiLCJleGl0IiwiZW50ZXIiLCJnYW1lIiwicGxheUNvbnRyb2wiLCJjb21wb25lbnRzIiwiaSIsImxlbmd0aCIsInRpdGxlU2NyZWVuIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJzdGFydEdhbWUiLCJjaGFuZ2VTdGF0ZSIsInBsYXkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRpY2siLCJzZXRUaW1lb3V0IiwibG9zZSIsInBhdXNlIiwiaW5uZXJIVE1MIiwiTWF0aCIsImZsb29yIiwiR2FtZXBsYXlPYmplY3QiLCJTcHJpdGUiLCJlbmdpbmUiLCJnYW1lRW5naW5lc09iamVjdCIsInNwcml0ZUVuZ2luZSIsImN1cnJlbnRGcmFtZU51bSIsImVsYXBzZWRUaW1lIiwibG9vcGluZyIsImZpbmlzaGVkIiwib25GaW5pc2hlZCIsImFkdmFuY2VGcmFtZSIsIm51bUZyYW1lcyIsImN1cnJlbnRGcmFtZSIsImN1cnJlbnRBbmltYXRpb24iLCJhbmltYXRpb25zIiwiQ29sbGlkZXIiLCJoaXRCb3giLCJvdGhlciIsIkNvbGxpc2lvblJlY2VpdmVyIiwiY29sbGlzaW9uRW5naW5lIiwiVHJhbnNmb3JtIiwicG9zaXRpb24iLCJwaXZvdCIsImNlbnRlciIsIlNjcm9sbGVyIiwicmVzZXQiLCJ4U2Nyb2xsIiwib3duZXIiLCJ0cmFuc2Zvcm0iLCJPYnN0YWNsZVBvb2xlciIsImFjdGl2ZU9ic3RhY2xlIiwib2JzdGFjbGVQb29sRW5naW5lIiwicmV0dXJuVG9Qb29sIiwiaW5hY3RpdmVPYnN0YWNsZSIsImRlYWN0aXZhdGUiLCJwbGF5ZXIiLCJmZXJuMSIsImZlcm4yIiwiZmVybjMiLCJmZXJuNCIsImZlcm41IiwicHJvdG8xIiwicHJvdG8yIiwicHJvdG8zIiwic2NvcmVDb3VudGVyIiwibmV4dFNjb3JlTWlsZXN0b25lIiwiaW5jcmVtZW50Q29udHJvbCIsImluY3JlbWVudCIsImFtdCIsIm1heCIsInN0YW5kIiwid2FsayIsImp1bXAiLCJmYWxsIiwiZ2xpZGUiLCJodXJ0IiwicG91bmNlIiwiY29sbGlzaW9uUmVjZWl2ZXIiLCJvbkhpdCIsImFsdGl0dWRlIiwieUFjY2VsIiwiZ2xpZGluZyIsInN0YXJ0SnVtcCIsImJvdW5jZSIsImZsYXAiLCJzZXRDdXJyZW50QW5pbWF0aW9uIiwibW92ZSIsImUiLCJmZXJuT25IaXQiLCJkZWFkRW5lbXkiLCJkZWFkIiwiY29sbGlkZXIiLCJzY3JvbGxlciIsIm9ic3RhY2xlUG9vbGVyIiwicHJvdG9PbkhpdCIsImhpdGJveCIsIm5leHRPYmplY3RQbGFjZW1lbnRUaW1lIiwiYWN0aXZlQ29tcG9uZW50cyIsImluYWN0aXZlQ29tcG9uZW50cyIsIm9iaiIsInNwbGljZSIsImluZGV4T2YiLCJyYW5kIiwicmFuZG9tIiwiciIsImFjdGl2YXRlIiwiY2xlYXJSZWN0IiwiZnJhbWUiLCJpc0NvbGxpZGluZyIsImEiLCJiIiwicGxheWVyQ29sbGlkZXIiLCJwbGF5ZXJCb3giLCJvdGhlckJveCIsInBsYXllclBvcyIsIm90aGVyUG9zIiwicGxheWVyQm91bmQiLCJvdGhlckJvdW5kIiwia2V5RG93biIsImtleUNvZGUiLCJyZXN0YXJ0IiwiYmdYIiwiZmdYIiwidGltZXN0YW1wIiwibGVmdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOzs7Ozs7Ozs7O0FBRUEsSUFBSUEsU0FBU0MsU0FBU0MsY0FBVCxDQUF3QixRQUF4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QyxLQUFLQyxLQUFMLENBQVc5QyxZQUFYLENBQWpDO0FBQ0FrRixXQUFPbkUsUUFBUCxDQUFnQjRELFNBQWhCLENBQTBCUCxRQUExQixHQUFxQyxDQUFDLEVBQUQsRUFBSyxHQUFMLENBQXJDO0FBQ0EzQyxTQUFLVSxXQUFMLENBQWlCQyxJQUFqQjtBQUNBOEMsV0FBTy9DLFdBQVAsQ0FBbUJnRSxJQUFuQjtBQUNBakIsV0FBT25FLFFBQVAsQ0FBZ0IyRixRQUFoQixDQUF5QkUsT0FBekIsR0FBbUMsS0FBbkM7QUFDQTdKLGtCQUFjaUYsS0FBZCxDQUFvQkMsVUFBcEIsR0FBaUMsUUFBakM7QUFDQVIsU0FBS1UsV0FBTCxDQUFpQkMsSUFBakI7QUFDQXJDLFdBQU93QyxzQkFBc0JDLElBQXRCLENBQVA7QUFFSDs7QUFFRDs7QUFFQTs7O0FBS0E7O0FBRUE7O0FBRUFnSCxPQUFPQyxPQUFQLEdBQWlCLEVBQUN6SSxzQkFBRCxFQUFqQiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIERPTSByZXNvdXJjZXMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxudmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpXG52YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKVxuXG5jdHgubW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG5jdHgud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG5jdHgubXNJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuY3R4LmZpbGxTdHlsZSA9IFwiIzAwMFwiXG5jdHguZmlsbFJlY3QoMCwgMCwgMzIwLCAyNDApXG5jdHguZmlsbFN0eWxlID0gXCIjZmZmXCJcbmN0eC5mb250ID0gXCIxNnB4IFByZXNzU3RhcnQyUFwiXG5jdHguZmlsbFRleHQoXCJMb2FkaW5nLi4uXCIsIDUwLCA1MClcblxudmFyIGJnMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmcxXCIpXG52YXIgZmcxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmZzFcIilcbnZhciBzY29yZWJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzY29yZWJvYXJkXCIpXG52YXIgbWVzc2FnZVdpbmRvdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVzc2FnZVwiKVxuXG52YXIgYXNzZXRzID0ge31cblxuYXNzZXRzLmZsYXBBdWRpbyA9IG5ldyBBdWRpbygpXG5hc3NldHMuZmxhcEF1ZGlvLnBsYXliYWNrUmF0ZSA9IDRcbmFzc2V0cy5jcnVuY2hBdWRpbyA9IG5ldyBBdWRpbygpXG5hc3NldHMuY3J1bmNoMkF1ZGlvID0gbmV3IEF1ZGlvKClcbmFzc2V0cy5jcnVuY2gyQXVkaW8ucGxheWJhY2tSYXRlID0gMlxuYXNzZXRzLmJsb3BBdWRpbyA9IG5ldyBBdWRpbygpXG5hc3NldHMuYmxvcEF1ZGlvLnBsYXliYWNrUmF0ZSA9IDAuNVxuYXNzZXRzLnNjcmVlY2hBdWRpbyA9IG5ldyBBdWRpbygpXG5hc3NldHMudGl0bGVzY3JlZW4gPSBuZXcgSW1hZ2UoKVxuYXNzZXRzLnNwcml0ZSA9IG5ldyBJbWFnZSgpXG5cbi8vIEF1ZGlvIHNldHVwID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBhdWRpb0N0eCA9IG5ldyAod2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KSgpXG5cbnZhciBmbGFwU3JjID0gYXVkaW9DdHguY3JlYXRlTWVkaWFFbGVtZW50U291cmNlKGFzc2V0cy5mbGFwQXVkaW8pXG5mbGFwU3JjLmNvbm5lY3QoYXVkaW9DdHguZGVzdGluYXRpb24pXG5cbnZhciBjcnVuY2hTcmMgPSBhdWRpb0N0eC5jcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UoYXNzZXRzLmNydW5jaEF1ZGlvKVxuY3J1bmNoU3JjLmNvbm5lY3QoYXVkaW9DdHguZGVzdGluYXRpb24pXG5cbnZhciBjcnVuY2gyU3JjID0gYXVkaW9DdHguY3JlYXRlTWVkaWFFbGVtZW50U291cmNlKGFzc2V0cy5jcnVuY2gyQXVkaW8pXG5jcnVuY2gyU3JjLmNvbm5lY3QoYXVkaW9DdHguZGVzdGluYXRpb24pXG5cbnZhciBibG9wU3JjID0gYXVkaW9DdHguY3JlYXRlTWVkaWFFbGVtZW50U291cmNlKGFzc2V0cy5ibG9wQXVkaW8pXG5ibG9wU3JjLmNvbm5lY3QoYXVkaW9DdHguZGVzdGluYXRpb24pXG5cbnZhciBzY3JlZWNoU3JjID0gYXVkaW9DdHguY3JlYXRlTWVkaWFFbGVtZW50U291cmNlKGFzc2V0cy5zY3JlZWNoQXVkaW8pXG5zY3JlZWNoU3JjLmNvbm5lY3QoYXVkaW9DdHguZGVzdGluYXRpb24pXG5cblxuXG52YXIgYXNzZXRTcmNzID0ge1xuICAgIHRpdGxlc2NyZWVuOiBcImFzc2V0cy90aXRsZXNjcmVlbi5wbmdcIixcbiAgICBzcHJpdGU6IFwiYXNzZXRzL3Nwcml0ZXNoZWV0cy9zaGVldDAwLnBuZ1wiLFxuICAgIGZsYXBBdWRpbzogXCJhc3NldHMvZmxhcC53YXZcIixcbiAgICBjcnVuY2hBdWRpbzogXCJhc3NldHMvY3J1bmNoLndhdlwiLFxuICAgIGNydW5jaDJBdWRpbzogXCJhc3NldHMvY3J1bmNoMi53YXZcIixcbiAgICBzY3JlZWNoQXVkaW86IFwiYXNzZXRzL3B1c291LndhdlwiLFxuICAgIGJsb3BBdWRpbzogXCJhc3NldHMvYmxvcC53YXZcIlxufVxuXG5mdW5jdGlvbiBsb2FkUHJvbWlzZShhc3NldCwgc3JjKXtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICAgIGFzc2V0Lm9ubG9hZCA9IHJlc1xuICAgICAgICBhc3NldC5vbmVycm9yID0gcmVzXG4gICAgICAgIGFzc2V0Lm9uY2FucGxheXRocm91Z2ggPSByZXNcbiAgICAgICAgYXNzZXQuc3JjID0gc3JjXG4gICAgfSlcbn1cblxudmFyIGFzc2V0UHJvbWlzZXMgPSBbXVxuXG5mb3IgKG5hbWUgaW4gYXNzZXRzKXtcbiAgICBhc3NldFByb21pc2VzLnB1c2gobG9hZFByb21pc2UoYXNzZXRzW25hbWVdLCBhc3NldFNyY3NbbmFtZV0pKVxufVxuXG5Qcm9taXNlLmFsbChhc3NldFByb21pc2VzKS50aGVuKHZhbCA9PiB7XG4gICAgY29uc29sZS5sb2coXCJhc2RmXCIpXG4gICAgY3R4LmRyYXdJbWFnZShhc3NldHMudGl0bGVzY3JlZW4sIDAsIDApXG59KVxuXG4vLyBDb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5jb25zdCBBTklNX0ZSQU1FUkFURSA9IDIwMFxuY29uc3QgU1BSSVRFX1dJRFRIID0gNDhcbmNvbnN0IFNQUklURV9IRUlHSFQgPSA0OFxuY29uc3QgR1JPVU5EID0gMTc2XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gR2xvYmFscyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgZmdTY3JvbGxTcGVlZCA9IDAuMTJcbnZhciBvYnN0YWNsZUZyZXF1ZW5jeSA9IDAuMlxudmFyIHNwcml0ZSA9IG5ldyBJbWFnZSgpXG52YXIgbG9vcFxudmFyIGN1cnJlbnRTY29yZSA9IDBcbnZhciBjdXJyZW50VGltZVxudmFyIGxhc3RUaW1lID0gMFxuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gQmFzZSBDbGFzc2VzID09PT09PT09PT09PT09PT09PT09PT09XG5cbmNsYXNzIFN0YXRle1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MgPSB7fSl7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgYXJncylcbiAgICB9XG4gICAgZW50ZXIoKXtcbiAgICAgICAgLy9PdmVycmlkZVxuICAgIH1cbiAgICBleGl0KCl7XG4gICAgICAgIC8vT3ZlcnJpZGVcbiAgICB9XG4gICAgbWVzc2FnZShtc2cpe1xuICAgICAgICAvL092ZXJyaWRlXG4gICAgfVxuICAgIHVwZGF0ZShkZWx0YVRpbWUpe1xuICAgICAgICAvL092ZXJyaWRlXG4gICAgfVxufVxuXG5jbGFzcyBDb250cm9se1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MgPSB7fSl7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgYXJncylcbiAgICB9XG5cbiAgICB1cGRhdGUoZGVsdGFUaW1lKXtcbiAgICAgICAgLy9PdmVycmlkZVxuICAgIH1cbn1cblxudmFyIHNoYXJlZFN0YXRlcyA9IHtcbiAgICB1cGRhdGVBbGxDb250cm9sczogbmV3IFN0YXRlKHtcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbihkdCl7XG4gICAgICAgICAgICBmb3IgKHZhciBjb250cm9sTmFtZSBpbiB0aGlzLmNvbnRyb2xzKXtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzW2NvbnRyb2xOYW1lXS51cGRhdGUoZHQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5jbGFzcyBHYW1lT2JqZWN0e1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MgPSB7fSl7XG4gICAgICAgIHRoaXMubmFtZSA9ICdHYW1lT2JqZWN0J1xuICAgICAgICB0aGlzLmNvbnRyb2xzID0ge31cbiAgICAgICAgdGhpcy5zdGF0ZXMgPSB7XG4gICAgICAgICAgICBkZWZhdWx0OiBzaGFyZWRTdGF0ZXMudXBkYXRlQWxsQ29udHJvbHNcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRTdGF0ZSA9IHRoaXMuc3RhdGVzLmRlZmF1bHRcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBhcmdzKVxuICAgIH1cblxuICAgIHVwZGF0ZShkdCl7XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlLnVwZGF0ZS5jYWxsKHRoaXMsIGR0KVxuICAgIH1cblxuICAgIG1lc3NhZ2UobXNnKXtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhdGUubWVzc2FnZS5jYWxsKHRoaXMsIG1zZylcbiAgICB9XG5cbiAgICBjaGFuZ2VTdGF0ZShuZXdTdGF0ZSl7XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlLmV4aXQuY2FsbCh0aGlzLCBuZXdTdGF0ZSlcbiAgICAgICAgbmV3U3RhdGUuZW50ZXIuY2FsbCh0aGlzLCB0aGlzLmN1cnJlbnRTdGF0ZSlcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhdGUgPSBuZXdTdGF0ZVxuICAgIH1cbn1cblxuLy8gR0FNRSBPQkpFQ1QgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxudmFyIGdhbWUgPSBuZXcgR2FtZU9iamVjdCh7bmFtZTogXCJHYW1lXCJ9KVxuXG4vLyBHYW1lIG9iamVjdCBjb250cm9scyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5nYW1lLmNvbnRyb2xzLnBsYXlDb250cm9sID0gbmV3IENvbnRyb2woe1xuICAgIGNvbXBvbmVudHM6IFtdLFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZHQpe1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29tcG9uZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudHNbaV0udXBkYXRlKGR0KVxuICAgICAgICB9XG4gICAgfVxufSlcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBHYW1lIG9iamVjdCBzdGF0ZXMgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciB0aXRsZVNjcmVlbiA9IG5ldyBTdGF0ZSh7XG4gICAgZW50ZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGxvb3ApXG4gICAgICAgIGZnMS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIlxuICAgICAgICBzY29yZWJvYXJkLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiMwMDBcIlxuICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgMzIwLCAyNDApXG4gICAgICAgIHZhciBzdGFydEdhbWUgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzKVxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShwbGF5KVxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHN0YXJ0R2FtZSlcbiAgICAgICAgfVxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgc3RhcnRHYW1lKVxuICAgIH0sXG59KVxuXG52YXIgcGxheSA9IG5ldyBTdGF0ZSh7XG4gICAgZW50ZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGZnMS5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCJcbiAgICAgICAgYmcxLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIlxuICAgICAgICBzY29yZWJvYXJkLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIlxuICAgICAgICBsb29wID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spXG4gICAgfSxcbiAgICBtZXNzYWdlOiBmdW5jdGlvbihtc2cpe1xuICAgICAgICBzd2l0Y2gobXNnKXtcbiAgICAgICAgICAgIGNhc2UgKFwibG9zZVwiKTpcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHt0aGlzLmNoYW5nZVN0YXRlKGxvc2UpfSwgNDAwKVxuICAgICAgICB9XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKGR0KXtcbiAgICAgICAgdGhpcy5jb250cm9scy5wbGF5Q29udHJvbC51cGRhdGUoZHQpXG4gICAgfVxufSlcblxudmFyIHBhdXNlID0gbmV3IFN0YXRlKHtcbiAgICBlbnRlcjogZnVuY3Rpb24oKXtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUobG9vcClcbiAgICB9XG59KVxuXG52YXIgbG9zZSA9IG5ldyBTdGF0ZSh7XG4gICAgZW50ZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGxvb3ApXG4gICAgICAgIG1lc3NhZ2VXaW5kb3cuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiXG4gICAgICAgIG1lc3NhZ2VXaW5kb3cuaW5uZXJIVE1MID0gYDxwIHN0eWxlPSd0ZXh0LWFsaWduOiBjZW50ZXI7IGxpbmUtaGVpZ2h0OiAzMHB4Jz5GaW5hbCBzY29yZTogJHtNYXRoLmZsb29yKGN1cnJlbnRTY29yZSl9PGJyLz5TUEFDRSB0byByZXN0YXJ0PC9wPmBcbiAgICB9XG5cbn0pXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuY2xhc3MgR2FtZXBsYXlPYmplY3QgZXh0ZW5kcyBHYW1lT2JqZWN0e1xuICAgIGNvbnN0cnVjdG9yKGFyZ3Mpe1xuICAgICAgICBzdXBlcihhcmdzKVxuICAgICAgICBnYW1lLmNvbnRyb2xzLnBsYXlDb250cm9sLmNvbXBvbmVudHMucHVzaCh0aGlzKVxuICAgIH1cbn1cblxuLy8gR2FtZXBsYXlPYmplY3QgQ29udHJvbHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmNsYXNzIFNwcml0ZSBleHRlbmRzIENvbnRyb2x7XG4gICAgY29uc3RydWN0b3IoYXJncyA9IHt9KXtcbiAgICAgICAgc3VwZXIoYXJncylcbiAgICAgICAgdGhpcy5lbmdpbmUgPSBnYW1lRW5naW5lc09iamVjdC5zcHJpdGVFbmdpbmVcbiAgICAgICAgdGhpcy5jdXJyZW50RnJhbWVOdW0gPSAwXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwXG4gICAgICAgIHRoaXMubG9vcGluZyA9IHRydWVcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMub25GaW5pc2hlZCA9IGZ1bmN0aW9uKCl7fVxuICAgIH1cblxuICAgIHVwZGF0ZShkdCl7XG4gICAgICAgIHRoaXMuYWR2YW5jZUZyYW1lKGR0KVxuICAgIH1cblxuICAgIGFkdmFuY2VGcmFtZShkdCl7XG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgKz0gZHRcbiAgICAgICAgaWYgKHRoaXMubG9vcGluZyl7XG4gICAgICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gdGhpcy5lbGFwc2VkVGltZSAlICh0aGlzLm51bUZyYW1lcyAqIEFOSU1fRlJBTUVSQVRFKVxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmZpbmlzaGVkKXtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsYXBzZWRUaW1lID49IHRoaXMubnVtRnJhbWVzICogQU5JTV9GUkFNRVJBVEUpe1xuICAgICAgICAgICAgICAgIHRoaXMub25GaW5pc2hlZCgpXG4gICAgICAgICAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRGcmFtZU51bSA9IE1hdGguZmxvb3IgKHRoaXMuZWxhcHNlZFRpbWUgLyBBTklNX0ZSQU1FUkFURSlcbiAgICAgICAgdGhpcy5jdXJyZW50RnJhbWUgPSB0aGlzLmN1cnJlbnRBbmltYXRpb25bdGhpcy5jdXJyZW50RnJhbWVOdW1dXG4gICAgfVxuXG4gICAgc2V0Q3VycmVudEFuaW1hdGlvbihuYW1lLCBsb29waW5nID0gdHJ1ZSwgb25GaW5pc2hlZCA9IGZ1bmN0aW9uKCl7fSl7XG4gICAgICAgIHRoaXMubG9vcGluZyA9IGxvb3BpbmdcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMub25GaW5pc2hlZCA9IG9uRmluaXNoZWRcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEFuaW1hdGlvbiAhPSB0aGlzLmFuaW1hdGlvbnNbbmFtZV0pe1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uID0gdGhpcy5hbmltYXRpb25zW25hbWVdXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRGcmFtZU51bSA9IDBcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gdGhpcy5jdXJyZW50QW5pbWF0aW9uW3RoaXMuY3VycmVudEZyYW1lTnVtXVxuICAgICAgICAgICAgdGhpcy5udW1GcmFtZXMgPSB0aGlzLmN1cnJlbnRBbmltYXRpb24ubGVuZ3RoXG4gICAgICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMFxuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBDb2xsaWRlciBleHRlbmRzIENvbnRyb2x7XG4gICAgY29uc3RydWN0b3IoYXJncyl7XG4gICAgICAgIHN1cGVyKGFyZ3MpXG4gICAgICAgIHRoaXMuaGl0Qm94ID0gdGhpcy5oaXRCb3ggfHwgWzIwLCAzMCwgMzMsIDQ4XVxuICAgIH1cblxuICAgIG9uSGl0KG90aGVyKXtcbiAgICAgICAgLy8gT3ZlcnJpZGVcbiAgICB9XG59XG5cbmNsYXNzIENvbGxpc2lvblJlY2VpdmVyIGV4dGVuZHMgQ29udHJvbHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzKXtcbiAgICAgICAgc3VwZXIoYXJncylcbiAgICAgICAgdGhpcy5lbmdpbmUgPSBnYW1lRW5naW5lc09iamVjdC5jb2xsaXNpb25FbmdpbmVcbiAgICB9XG5cbiAgICBvbkhpdChvdGhlcil7XG4gICAgICAgIC8vIE92ZXJyaWRlXG4gICAgfVxufVxuXG5jbGFzcyBUcmFuc2Zvcm0gZXh0ZW5kcyBDb250cm9se1xuICAgIGNvbnN0cnVjdG9yKGFyZ3Mpe1xuICAgICAgICBzdXBlcihhcmdzKVxuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbiB8fCBbMCwgR1JPVU5EIC0gU1BSSVRFX0hFSUdIVF1cbiAgICAgICAgdGhpcy5waXZvdCA9IHRoaXMucGl2b3QgfHwgW1NQUklURV9XSURUSC8yLCBTUFJJVEVfSEVJR0hUXVxuICAgICAgICB0aGlzLmNlbnRlciA9IHRoaXMuY2VudGVyIHx8IFtTUFJJVEVfV0lEVEgvMiwgU1BSSVRFX0hFSUdIVC8yXVxuICAgIH1cbn1cblxuY2xhc3MgU2Nyb2xsZXIgZXh0ZW5kcyBDb250cm9se1xuICAgIGNvbnN0cnVjdG9yKGFyZ3Mpe1xuICAgICAgICBzdXBlcihhcmdzKVxuICAgICAgICB0aGlzLnJlc2V0KClcbiAgICB9XG4gICAgcmVzZXQoKXtcbiAgICAgICAgdGhpcy54U2Nyb2xsID0gMFxuICAgIH1cbiAgICB1cGRhdGUoZHQpe1xuICAgICAgICB0aGlzLnhTY3JvbGwgPSAodGhpcy54U2Nyb2xsICsgZmdTY3JvbGxTcGVlZCAqIGR0KVxuICAgICAgICB0aGlzLm93bmVyLmNvbnRyb2xzLnRyYW5zZm9ybS5wb3NpdGlvblswXSA9IDMyMCAtIHRoaXMueFNjcm9sbFxuICAgIH1cbn1cblxuY2xhc3MgT2JzdGFjbGVQb29sZXIgZXh0ZW5kcyBDb250cm9se1xuICAgIGNvbnN0cnVjdG9yKGFyZ3Mpe1xuICAgICAgICBzdXBlcihhcmdzKVxuICAgIH1cblxuICAgIGFjdGl2YXRlKCl7XG4gICAgICAgIHRoaXMub3duZXIuY2hhbmdlU3RhdGUoYWN0aXZlT2JzdGFjbGUpXG4gICAgfVxuXG4gICAgZGVhY3RpdmF0ZSgpe1xuICAgICAgICBnYW1lRW5naW5lc09iamVjdC5jb250cm9scy5vYnN0YWNsZVBvb2xFbmdpbmUucmV0dXJuVG9Qb29sKHRoaXMpXG4gICAgICAgIHRoaXMub3duZXIuY2hhbmdlU3RhdGUoaW5hY3RpdmVPYnN0YWNsZSlcbiAgICB9XG5cbiAgICB1cGRhdGUoZHQpe1xuICAgICAgICBpZiAodGhpcy5vd25lci5jb250cm9scy50cmFuc2Zvcm0ucG9zaXRpb25bMF0gPCAtU1BSSVRFX1dJRFRIIC0gMSl7XG4gICAgICAgICAgICB0aGlzLmRlYWN0aXZhdGUoKVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIEdhbWUgT2JqZWN0IGRlY2xhcmF0aW9ucyA9PT09PT09PT09PT09PT09PT09PT09PT1cblxudmFyIHBsYXllciA9IG5ldyBHYW1lcGxheU9iamVjdCh7bmFtZTogXCJQbGF5ZXJcIn0pXG52YXIgZ2FtZUVuZ2luZXNPYmplY3QgPSBuZXcgR2FtZXBsYXlPYmplY3Qoe25hbWU6IFwiR2FtZUVuZ2luZXNPYmplY3RcIn0pXG52YXIgZmVybjEgPSBuZXcgR2FtZXBsYXlPYmplY3Qoe25hbWU6IFwiRmVybjFcIn0pXG52YXIgZmVybjIgPSBuZXcgR2FtZXBsYXlPYmplY3Qoe25hbWU6IFwiRmVybjJcIn0pXG52YXIgZmVybjMgPSBuZXcgR2FtZXBsYXlPYmplY3Qoe25hbWU6IFwiRmVybjNcIn0pXG52YXIgZmVybjQgPSBuZXcgR2FtZXBsYXlPYmplY3Qoe25hbWU6IFwiRmVybjRcIn0pXG52YXIgZmVybjUgPSBuZXcgR2FtZXBsYXlPYmplY3Qoe25hbWU6IFwiRmVybjVcIn0pXG52YXIgcHJvdG8xID0gbmV3IEdhbWVwbGF5T2JqZWN0KHtuYW1lOiBcIlByb3RvMVwifSlcbnZhciBwcm90bzIgPSBuZXcgR2FtZXBsYXlPYmplY3Qoe25hbWU6IFwiUHJvdG8yXCJ9KVxudmFyIHByb3RvMyA9IG5ldyBHYW1lcGxheU9iamVjdCh7bmFtZTogXCJQcm90bzNcIn0pXG52YXIgc2NvcmVDb3VudGVyID0gbmV3IEdhbWVwbGF5T2JqZWN0KHtuYW1lOiBcIlNjb3JlXCJ9KVxudmFyIG1lc3NhZ2UgPSBuZXcgR2FtZXBsYXlPYmplY3Qoe25hbWU6IFwiTWVzc2FnZVdpbmRvd1wifSlcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBTY29yZSBjb250cm9scyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgbmV4dFNjb3JlTWlsZXN0b25lID0gNTBcblxuc2NvcmVDb3VudGVyLmNvbnRyb2xzLmluY3JlbWVudENvbnRyb2wgPSBuZXcgQ29udHJvbCh7XG4gICAgb3duZXI6IHNjb3JlQ291bnRlcixcbiAgICBpbmNyZW1lbnQ6IGZ1bmN0aW9uKGFtdCl7XG4gICAgICAgIGN1cnJlbnRTY29yZSArPSBhbXRcbiAgICAgICAgc2NvcmVib2FyZC5pbm5lckhUTUwgPSBgU0NPUkU6XFxuJHtNYXRoLmZsb29yKGN1cnJlbnRTY29yZSl9YFxuICAgICAgICBpZiAoY3VycmVudFNjb3JlID4gbmV4dFNjb3JlTWlsZXN0b25lKXtcbiAgICAgICAgICAgIGZnU2Nyb2xsU3BlZWQgKz0gMC4wMVxuICAgICAgICAgICAgb2JzdGFjbGVGcmVxdWVuY3kgPSBNYXRoLm1heChvYnN0YWNsZUZyZXF1ZW5jeSAtIDAuMDEsIDAuMDQpXG4gICAgICAgICAgICBuZXh0U2NvcmVNaWxlc3RvbmUgKz0gNTBcbiAgICAgICAgfVxuICAgIH1cbn0pXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4vLyBQbGF5ZXIgb2JqZWN0IGNvbnRyb2xzID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5wbGF5ZXIuY29udHJvbHMudHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybSh7XG4gICAgb3duZXI6IHBsYXllcixcbiAgICBwb3NpdGlvbjogWzQwLCAxMjVdXG59KVxuXG5wbGF5ZXIuY29udHJvbHMuc3ByaXRlID0gbmV3IFNwcml0ZSh7XG4gICAgb3duZXI6IHBsYXllcixcbiAgICBhbmltYXRpb25zOiB7XG4gICAgICAgIHN0YW5kOiBbN10sXG4gICAgICAgIHdhbGs6IFsxMSwgMTJdLFxuICAgICAgICBqdW1wOiBbNV0sXG4gICAgICAgIGZhbGw6IFs2XSxcbiAgICAgICAgZ2xpZGU6IFs3LCA4XSxcbiAgICAgICAgaHVydDogWzldLFxuICAgICAgICBwb3VuY2U6IFsxMF1cbiAgICB9XG59KVxuXG5wbGF5ZXIuY29udHJvbHMuY29sbGlzaW9uUmVjZWl2ZXIgPSBuZXcgQ29sbGlzaW9uUmVjZWl2ZXIoe1xuICAgIG93bmVyOiBwbGF5ZXIsXG4gICAgaGl0Qm94OiBbMjAsIDI2LCA0MCwgNDBdLFxuICAgIG9uSGl0OiBmdW5jdGlvbihvdGhlcil7XG4gICAgICAgIC8vIGlmIChvdGhlci5vd25lci5jb250cm9scy50cmFuc2Zvcm0ucG9zaXRpb25bMV0gPiB0aGlzLm93bmVyLmNvbnRyb2xzLnRyYW5zZm9ybS5wb3NpdGlvblsxXSl7XG4gICAgICAgICAgICB0aGlzLm93bmVyLm1lc3NhZ2UoXCJwb3VuY2VcIiwgb3RoZXIpXG4gICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzLm93bmVyLm1lc3NhZ2UoXCJodXJ0XCIsIG90aGVyKVxuICAgICAgICAvLyB9XG4gICAgfVxufSlcblxucGxheWVyLmNvbnRyb2xzLmFsdGl0dWRlID0gbmV3IENvbnRyb2woe1xuICAgIG93bmVyOiBwbGF5ZXIsXG4gICAgeUFjY2VsOiAwLFxuICAgIGdsaWRpbmc6IGZhbHNlLFxuICAgIHN0YXJ0SnVtcDogZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy55QWNjZWwgLT0gOVxuICAgICAgICB0aGlzLmdsaWRpbmcgPSB0cnVlXG4gICAgfSxcbiAgICBib3VuY2U6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMueUFjY2VsID0gLTdcbiAgICAgICAgdGhpcy5nbGlkaW5nID0gZmFsc2VcbiAgICB9LFxuICAgIGZsYXA6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMueUFjY2VsIC09IHRoaXMueUFjY2VsICogMC45XG4gICAgICAgIHRoaXMuZ2xpZGluZyA9IHRydWVcbiAgICAgICAgdGhpcy5vd25lci5jb250cm9scy5zcHJpdGUuc2V0Q3VycmVudEFuaW1hdGlvbihcImp1bXBcIilcbiAgICAgICAgYXNzZXRzLmZsYXBBdWRpby5wbGF5KClcbiAgICB9LFxuICAgIGZhbGw6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuZ2xpZGluZyA9IGZhbHNlXG4gICAgICAgIHRoaXMub3duZXIuY29udHJvbHMuc3ByaXRlLnNldEN1cnJlbnRBbmltYXRpb24oXCJmYWxsXCIpXG4gICAgfSxcbiAgICBtb3ZlOiBmdW5jdGlvbihkdCl7XG4gICAgICAgIHRoaXMueUFjY2VsID0gTWF0aC5tYXgodGhpcy55QWNjZWwsIC05KVxuICAgICAgICB0aGlzLm93bmVyLmNvbnRyb2xzLnRyYW5zZm9ybS5wb3NpdGlvblsxXSArPSB0aGlzLnlBY2NlbCAqIChkdCAvIDMwKVxuICAgICAgICAvLyBpZiAodGhpcy5nbGlkaW5nICYmIHRoaXMueUFjY2VsID4gMCl7XG4gICAgICAgIC8vICAgICB0aGlzLm93bmVyLmNvbnRyb2xzLnNwcml0ZS5zZXRDdXJyZW50QW5pbWF0aW9uKFwiZ2xpZGVcIilcbiAgICAgICAgLy8gICAgIHRoaXMueUFjY2VsID0gKGR0IC8gMzApXG4gICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnlBY2NlbCArPSAwLjQ1ICogKGR0IC8gMzApXG4gICAgICAgIC8vIH1cbiAgICAgICAgaWYgKHRoaXMub3duZXIuY29udHJvbHMudHJhbnNmb3JtLnBvc2l0aW9uWzFdID49IEdST1VORCAtIFNQUklURV9IRUlHSFQgLyAyKXtcbiAgICAgICAgICAgIHRoaXMub3duZXIuY29udHJvbHMuc3ByaXRlLnNldEN1cnJlbnRBbmltYXRpb24oXCJodXJ0XCIpXG4gICAgICAgICAgICB0aGlzLnlBY2NlbCA9IDEuNVxuICAgICAgICAgICAgYXNzZXRzLmJsb3BBdWRpby5wbGF5KClcbiAgICAgICAgICAgIGdhbWUubWVzc2FnZShcImxvc2VcIilcbiAgICAgICAgfVxuICAgIH1cbn0pXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gUGxheWVyIG9iamVjdCBzdGF0ZXMgPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgd2FsayA9IG5ldyBTdGF0ZSh7XG4gICAgZW50ZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuY29udHJvbHMuc3ByaXRlLnNldEN1cnJlbnRBbmltYXRpb24oXCJ3YWxrXCIpXG4gICAgfSxcbiAgICBtZXNzYWdlOiBmdW5jdGlvbihtc2cpe1xuICAgICAgICBzd2l0Y2ggKG1zZyl7XG4gICAgICAgICAgICBjYXNlIFwianVtcFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUoanVtcClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBcImh1cnRcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKGh1cnQpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdXBkYXRlOiBmdW5jdGlvbihkdCl7XG4gICAgICAgIHRoaXMuY29udHJvbHMuc3ByaXRlLnVwZGF0ZShkdClcbiAgICB9XG59KVxuXG52YXIganVtcCA9IG5ldyBTdGF0ZSh7XG4gICAgZW50ZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuY29udHJvbHMuc3ByaXRlLnNldEN1cnJlbnRBbmltYXRpb24oXCJqdW1wXCIpXG4gICAgICAgIHRoaXMuY29udHJvbHMuYWx0aXR1ZGUuc3RhcnRKdW1wKClcbiAgICB9LFxuICAgIG1lc3NhZ2U6IGZ1bmN0aW9uKG1zZywgZSl7XG4gICAgICAgIHN3aXRjaCAobXNnKXtcbiAgICAgICAgICAgIGNhc2UgXCJqdW1wXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9scy5hbHRpdHVkZS5mbGFwKClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBcImZhbGxcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmFsdGl0dWRlLmZhbGwoKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIFwiaHVydFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUoaHVydClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBcInBvdW5jZVwiOlxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHMuc3ByaXRlLnNldEN1cnJlbnRBbmltYXRpb24oXCJwb3VuY2VcIilcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmFsdGl0dWRlLmJvdW5jZSgpXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZHQpe1xuICAgICAgICB0aGlzLmNvbnRyb2xzLmFsdGl0dWRlLm1vdmUoZHQpXG4gICAgICAgIHRoaXMuY29udHJvbHMuc3ByaXRlLnVwZGF0ZShkdClcbiAgICB9XG59KVxuXG52YXIgaHVydCA9IG5ldyBTdGF0ZSh7XG4gICAgZW50ZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGFzc2V0cy5zY3JlZWNoQXVkaW8ucGxheSgpXG4gICAgICAgIHRoaXMuY29udHJvbHMuYWx0aXR1ZGUuYm91bmNlKClcbiAgICAgICAgdGhpcy5jb250cm9scy5zcHJpdGUuc2V0Q3VycmVudEFuaW1hdGlvbihcImh1cnRcIilcbiAgICAgICAgZ2FtZS5tZXNzYWdlKFwibG9zZVwiKVxuICAgIH0sXG4gICAgbWVzc2FnZTogZnVuY3Rpb24obXNnKXtcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZHQpe1xuICAgICAgICB0aGlzLmNvbnRyb2xzLmFsdGl0dWRlLm1vdmUoZHQpXG4gICAgICAgIHRoaXMuY29udHJvbHMuc3ByaXRlLnVwZGF0ZShkdClcbiAgICB9XG59KVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIEZlcm4gY29udHJvbHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIFRPRE86IE1ha2UgRmVybiBjbGFzc1xuXG5mdW5jdGlvbiBmZXJuT25IaXQoKXtcbiAgICBpZiAocGxheWVyLmN1cnJlbnRTdGF0ZSA9PSBqdW1wICYmIHBsYXllci5jb250cm9scy50cmFuc2Zvcm0ucG9zaXRpb25bMV0gPCB0aGlzLm93bmVyLmNvbnRyb2xzLnRyYW5zZm9ybS5wb3NpdGlvblsxXSl7XG4gICAgICAgICAgICB0aGlzLm93bmVyLmNoYW5nZVN0YXRlKGRlYWRFbmVteSlcbiAgICAgICAgICAgIGFzc2V0cy5jcnVuY2gyQXVkaW8ucGxheSgpXG4gICAgICAgIH1cbn1cblxuZmVybjEuY29udHJvbHMuc3ByaXRlID0gbmV3IFNwcml0ZSh7XG4gICAgb3duZXI6IGZlcm4xLFxuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgZGVmYXVsdDogWzFdLFxuICAgICAgICBkZWFkOiBbMF1cbiAgICB9XG59KVxuZmVybjEuY29udHJvbHMuY29sbGlkZXIgPSBuZXcgQ29sbGlkZXIoe293bmVyOiBmZXJuMSwgb25IaXQ6IGZlcm5PbkhpdH0pXG5mZXJuMS5jb250cm9scy50cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKHtvd25lcjogZmVybjF9KVxuZmVybjEuY29udHJvbHMuc2Nyb2xsZXIgPSBuZXcgU2Nyb2xsZXIoe293bmVyOiBmZXJuMX0pXG5mZXJuMS5jb250cm9scy5vYnN0YWNsZVBvb2xlciA9IG5ldyBPYnN0YWNsZVBvb2xlcih7b3duZXI6IGZlcm4xfSlcblxuZmVybjIuY29udHJvbHMuc3ByaXRlID0gbmV3IFNwcml0ZSh7XG4gICAgb3duZXI6IGZlcm4yLFxuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgZGVmYXVsdDogWzFdLFxuICAgICAgICBkZWFkOiBbMF1cbiAgICB9XG59KVxuZmVybjIuY29udHJvbHMuY29sbGlkZXIgPSBuZXcgQ29sbGlkZXIoe293bmVyOiBmZXJuMiwgb25IaXQ6IGZlcm5PbkhpdH0pXG5mZXJuMi5jb250cm9scy50cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKHtvd25lcjogZmVybjJ9KVxuZmVybjIuY29udHJvbHMuc2Nyb2xsZXIgPSBuZXcgU2Nyb2xsZXIoe293bmVyOiBmZXJuMn0pXG5mZXJuMi5jb250cm9scy5vYnN0YWNsZVBvb2xlciA9IG5ldyBPYnN0YWNsZVBvb2xlcih7b3duZXI6IGZlcm4yfSlcblxuZmVybjMuY29udHJvbHMuc3ByaXRlID0gbmV3IFNwcml0ZSh7XG4gICAgb3duZXI6IGZlcm4zLFxuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgZGVmYXVsdDogWzFdLFxuICAgICAgICBkZWFkOiBbMF1cbiAgICB9XG59KVxuZmVybjMuY29udHJvbHMuY29sbGlkZXIgPSBuZXcgQ29sbGlkZXIoe293bmVyOiBmZXJuMywgb25IaXQ6IGZlcm5PbkhpdH0pXG5mZXJuMy5jb250cm9scy50cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKHtvd25lcjogZmVybjN9KVxuZmVybjMuY29udHJvbHMuc2Nyb2xsZXIgPSBuZXcgU2Nyb2xsZXIoe293bmVyOiBmZXJuM30pXG5mZXJuMy5jb250cm9scy5vYnN0YWNsZVBvb2xlciA9IG5ldyBPYnN0YWNsZVBvb2xlcih7b3duZXI6IGZlcm4zfSlcblxuZmVybjQuY29udHJvbHMuc3ByaXRlID0gbmV3IFNwcml0ZSh7XG4gICAgb3duZXI6IGZlcm40LFxuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgZGVmYXVsdDogWzFdLFxuICAgICAgICBkZWFkOiBbMF1cbiAgICB9XG59KVxuZmVybjQuY29udHJvbHMuY29sbGlkZXIgPSBuZXcgQ29sbGlkZXIoe293bmVyOiBmZXJuNCwgb25IaXQ6IGZlcm5PbkhpdH0pXG5mZXJuNC5jb250cm9scy50cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKHtvd25lcjogZmVybjR9KVxuZmVybjQuY29udHJvbHMuc2Nyb2xsZXIgPSBuZXcgU2Nyb2xsZXIoe293bmVyOiBmZXJuNH0pXG5mZXJuNC5jb250cm9scy5vYnN0YWNsZVBvb2xlciA9IG5ldyBPYnN0YWNsZVBvb2xlcih7b3duZXI6IGZlcm40fSlcblxuZmVybjUuY29udHJvbHMuc3ByaXRlID0gbmV3IFNwcml0ZSh7XG4gICAgb3duZXI6IGZlcm41LFxuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgZGVmYXVsdDogWzFdLFxuICAgICAgICBkZWFkOiBbMF1cbiAgICB9XG59KVxuZmVybjUuY29udHJvbHMuY29sbGlkZXIgPSBuZXcgQ29sbGlkZXIoe293bmVyOiBmZXJuNSwgb25IaXQ6IGZlcm5PbkhpdH0pXG5mZXJuNS5jb250cm9scy50cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKHtvd25lcjogZmVybjV9KVxuZmVybjUuY29udHJvbHMuc2Nyb2xsZXIgPSBuZXcgU2Nyb2xsZXIoe293bmVyOiBmZXJuNX0pXG5mZXJuNS5jb250cm9scy5vYnN0YWNsZVBvb2xlciA9IG5ldyBPYnN0YWNsZVBvb2xlcih7b3duZXI6IGZlcm41fSlcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBQcm90byBjb250cm9scyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBUT0RPOiBNYWtlIHByb3RvY2VyYXRvcHMgY2xhc3NcblxuZnVuY3Rpb24gcHJvdG9PbkhpdCgpe1xuICAgIGlmIChwbGF5ZXIuY3VycmVudFN0YXRlID09IGp1bXAgJiYgcGxheWVyLmNvbnRyb2xzLnRyYW5zZm9ybS5wb3NpdGlvblsxXSA8IHRoaXMub3duZXIuY29udHJvbHMudHJhbnNmb3JtLnBvc2l0aW9uWzFdKXtcbiAgICAgICAgICAgIHRoaXMub3duZXIuY2hhbmdlU3RhdGUoZGVhZEVuZW15KVxuICAgICAgICAgICAgYXNzZXRzLmNydW5jaEF1ZGlvLnBsYXkoKVxuICAgICAgICB9XG59XG5cbnByb3RvMS5jb250cm9scy5zcHJpdGUgPSBuZXcgU3ByaXRlKHtcbiAgICBvd25lcjogcHJvdG8xLFxuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgZGVmYXVsdDogWzRdLFxuICAgICAgICBkZWFkOiBbMiwzXVxuICAgIH1cbn0pXG5wcm90bzEuY29udHJvbHMuY29sbGlkZXIgPSBuZXcgQ29sbGlkZXIoe1xuICAgIG93bmVyOiBwcm90bzEsXG4gICAgaGl0Ym94OiBbMywgMzEsIDMxLCA0OF0sXG4gICAgb25IaXQ6IHByb3RvT25IaXRcbn0pXG5wcm90bzEuY29udHJvbHMudHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybSh7b3duZXI6IHByb3RvMX0pXG5wcm90bzEuY29udHJvbHMuc2Nyb2xsZXIgPSBuZXcgU2Nyb2xsZXIoe293bmVyOiBwcm90bzF9KVxucHJvdG8xLmNvbnRyb2xzLm9ic3RhY2xlUG9vbGVyID0gbmV3IE9ic3RhY2xlUG9vbGVyKHtvd25lcjogcHJvdG8xfSlcblxucHJvdG8yLmNvbnRyb2xzLnNwcml0ZSA9IG5ldyBTcHJpdGUoe1xuICAgIG93bmVyOiBwcm90bzIsXG4gICAgYW5pbWF0aW9uczoge1xuICAgICAgICBkZWZhdWx0OiBbNF0sXG4gICAgICAgIGRlYWQ6IFsyLDNdXG4gICAgfVxufSlcbnByb3RvMi5jb250cm9scy5jb2xsaWRlciA9IG5ldyBDb2xsaWRlcih7XG4gICAgb3duZXI6IHByb3RvMixcbiAgICBoaXRib3g6IFszLCAzMSwgMzEsIDQ4XSxcbiAgICBvbkhpdDogcHJvdG9PbkhpdFxufSlcbnByb3RvMi5jb250cm9scy50cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKHtvd25lcjogcHJvdG8yfSlcbnByb3RvMi5jb250cm9scy5zY3JvbGxlciA9IG5ldyBTY3JvbGxlcih7b3duZXI6IHByb3RvMn0pXG5wcm90bzIuY29udHJvbHMub2JzdGFjbGVQb29sZXIgPSBuZXcgT2JzdGFjbGVQb29sZXIoe293bmVyOiBwcm90bzJ9KVxuXG5wcm90bzMuY29udHJvbHMuc3ByaXRlID0gbmV3IFNwcml0ZSh7XG4gICAgb3duZXI6IHByb3RvMyxcbiAgICBhbmltYXRpb25zOiB7XG4gICAgICAgIGRlZmF1bHQ6IFs0XSxcbiAgICAgICAgZGVhZDogWzIsM11cbiAgICB9XG59KVxucHJvdG8zLmNvbnRyb2xzLmNvbGxpZGVyID0gbmV3IENvbGxpZGVyKHtcbiAgICBvd25lcjogcHJvdG8zLFxuICAgIGhpdGJveDogWzMsIDMxLCAzMSwgNDhdLFxuICAgIG9uSGl0OiBwcm90b09uSGl0XG59KVxucHJvdG8zLmNvbnRyb2xzLnRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0oe293bmVyOiBwcm90bzN9KVxucHJvdG8zLmNvbnRyb2xzLnNjcm9sbGVyID0gbmV3IFNjcm9sbGVyKHtvd25lcjogcHJvdG8zfSlcbnByb3RvMy5jb250cm9scy5vYnN0YWNsZVBvb2xlciA9IG5ldyBPYnN0YWNsZVBvb2xlcih7b3duZXI6IHByb3RvM30pXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gRmVybiBzdGF0ZXMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgYWN0aXZlT2JzdGFjbGUgPSBuZXcgU3RhdGUoe1xuICAgIGVudGVyOiBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLmNvbnRyb2xzLnNwcml0ZS5zZXRDdXJyZW50QW5pbWF0aW9uKFwiZGVmYXVsdFwiKVxuICAgICAgICB0aGlzLmNvbnRyb2xzLnNjcm9sbGVyLnJlc2V0KClcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZHQpe1xuICAgICAgICB0aGlzLmNvbnRyb2xzLnNjcm9sbGVyLnVwZGF0ZShkdClcbiAgICAgICAgdGhpcy5jb250cm9scy5vYnN0YWNsZVBvb2xlci51cGRhdGUoZHQpXG4gICAgfVxufSlcblxudmFyIGluYWN0aXZlT2JzdGFjbGUgPSBuZXcgU3RhdGUoe1xuICAgIGVudGVyOiBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLmNvbnRyb2xzLnRyYW5zZm9ybS5wb3NpdGlvbiA9IFstU1BSSVRFX1dJRFRILCBHUk9VTkQgLSBTUFJJVEVfSEVJR0hUXVxuICAgICAgICBnYW1lRW5naW5lc09iamVjdC5jb250cm9scy5vYnN0YWNsZVBvb2xFbmdpbmUucmV0dXJuVG9Qb29sKClcbiAgICB9XG59KVxuXG52YXIgZGVhZEVuZW15ID0gbmV3IFN0YXRlKHtcbiAgICBlbnRlcjogZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5jb250cm9scy5zcHJpdGUuc2V0Q3VycmVudEFuaW1hdGlvbihcImRlYWRcIiwgZmFsc2UpXG4gICAgICAgIHNjb3JlQ291bnRlci5jb250cm9scy5pbmNyZW1lbnRDb250cm9sLmluY3JlbWVudCgxMClcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZHQpe1xuICAgICAgICB0aGlzLmNvbnRyb2xzLnNjcm9sbGVyLnVwZGF0ZShkdClcbiAgICAgICAgdGhpcy5jb250cm9scy5vYnN0YWNsZVBvb2xlci51cGRhdGUoZHQpXG4gICAgICAgIHRoaXMuY29udHJvbHMuc3ByaXRlLnVwZGF0ZShkdClcbiAgICB9XG59KVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBHYW1lIGVuZ2luZSBjb250cm9scyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBUT0RPOiBPcHRpbWl6ZVxuZ2FtZUVuZ2luZXNPYmplY3QuY29udHJvbHMub2JzdGFjbGVQb29sRW5naW5lID0gbmV3IENvbnRyb2woe1xuICAgIG93bmVyOiBnYW1lRW5naW5lc09iamVjdCxcbiAgICBuZXh0T2JqZWN0UGxhY2VtZW50VGltZTogMCxcbiAgICBhY3RpdmVDb21wb25lbnRzOiBbXSxcbiAgICBpbmFjdGl2ZUNvbXBvbmVudHM6IFtmZXJuMS5jb250cm9scy5vYnN0YWNsZVBvb2xlciwgZmVybjIuY29udHJvbHMub2JzdGFjbGVQb29sZXIsIGZlcm4zLmNvbnRyb2xzLm9ic3RhY2xlUG9vbGVyLGZlcm40LmNvbnRyb2xzLm9ic3RhY2xlUG9vbGVyLCBmZXJuNS5jb250cm9scy5vYnN0YWNsZVBvb2xlciwgcHJvdG8xLmNvbnRyb2xzLm9ic3RhY2xlUG9vbGVyLCBwcm90bzIuY29udHJvbHMub2JzdGFjbGVQb29sZXIsIHByb3RvMy5jb250cm9scy5vYnN0YWNsZVBvb2xlcl0sXG4gICAgcmV0dXJuVG9Qb29sOiBmdW5jdGlvbihvYmope1xuICAgICAgICB0aGlzLmFjdGl2ZUNvbXBvbmVudHMuc3BsaWNlKHRoaXMuYWN0aXZlQ29tcG9uZW50cy5pbmRleE9mKG9iaiksIDEpXG4gICAgICAgIHRoaXMuaW5hY3RpdmVDb21wb25lbnRzLnB1c2gob2JqKVxuICAgIH0sXG4gICAgdXBkYXRlOiBmdW5jdGlvbihkdCl7XG4gICAgICAgIGlmIChjdXJyZW50VGltZSA+PSB0aGlzLm5leHRPYmplY3RQbGFjZW1lbnRUaW1lKXtcbiAgICAgICAgICAgIHZhciByYW5kID0gTWF0aC5yYW5kb20oKVxuICAgICAgICAgICAgaWYgKHJhbmQgPCBvYnN0YWNsZUZyZXF1ZW5jeSkge1xuICAgICAgICAgICAgICAgIHZhciByID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHRoaXMuaW5hY3RpdmVDb21wb25lbnRzLmxlbmd0aCAtMSkpXG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IHRoaXMuaW5hY3RpdmVDb21wb25lbnRzLnNwbGljZShyLCAxKVswXVxuICAgICAgICAgICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVDb21wb25lbnRzLnB1c2gob2JqKVxuICAgICAgICAgICAgICAgICAgICBvYmouYWN0aXZhdGUoKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRPYmplY3RQbGFjZW1lbnRUaW1lID0gY3VycmVudFRpbWUgKyAzMDBcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pXG5cbmdhbWVFbmdpbmVzT2JqZWN0LmNvbnRyb2xzLnNwcml0ZUVuZ2luZSA9IG5ldyBDb250cm9sKHtcbiAgICBvd25lcjogZ2FtZUVuZ2luZXNPYmplY3QsXG4gICAgY29tcG9uZW50czogW3BsYXllci5jb250cm9scy5zcHJpdGUsIGZlcm4xLmNvbnRyb2xzLnNwcml0ZSwgZmVybjIuY29udHJvbHMuc3ByaXRlLCBmZXJuMy5jb250cm9scy5zcHJpdGUsIGZlcm40LmNvbnRyb2xzLnNwcml0ZSwgZmVybjUuY29udHJvbHMuc3ByaXRlLCBwcm90bzEuY29udHJvbHMuc3ByaXRlLCBwcm90bzIuY29udHJvbHMuc3ByaXRlLCBwcm90bzMuY29udHJvbHMuc3ByaXRlXSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKGR0KXtcbiAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCAzMjAsIDI0MClcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbXBvbmVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5jb21wb25lbnRzW2ldLm93bmVyLmNvbnRyb2xzLnRyYW5zZm9ybS5wb3NpdGlvblxuICAgICAgICAgICAgdmFyIGZyYW1lID0gdGhpcy5jb21wb25lbnRzW2ldLmN1cnJlbnRGcmFtZVxuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShhc3NldHMuc3ByaXRlLCBmcmFtZSpTUFJJVEVfV0lEVEgsIDAsIFNQUklURV9XSURUSCwgU1BSSVRFX0hFSUdIVCwgcG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCBTUFJJVEVfV0lEVEgsIFNQUklURV9IRUlHSFQpXG4gICAgICAgIH1cbiAgICB9XG59KVxuXG5mdW5jdGlvbiBpc0NvbGxpZGluZyhhLCBiKXtcblxuICAgIC8vIElmIGEgaXMgYWJvdmUgYlxuICAgIGlmIChhWzNdIDwgYlsxXSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvLyBJZiBhIGlzIGJlbG93IGJcbiAgICBpZiAoYVsxXSA+IGJbM10pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgLy8gSWYgYSBpcyBsZWZ0IG9mIGJcbiAgICBpZiAoYVsyXSA8IGJbMF0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgLy8gSWYgYSBpcyByaWdodCBvZiBiXG4gICAgaWYgKGFbMF0gPiBiWzJdKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8vIEVsc2UgY29sbGlzaW9uXG4gICAgcmV0dXJuIHRydWVcbn1cblxuZ2FtZUVuZ2luZXNPYmplY3QuY29udHJvbHMuY29sbGlzaW9uRW5naW5lID0gbmV3IENvbnRyb2woe1xuICAgIG93bmVyOiBnYW1lRW5naW5lc09iamVjdCxcbiAgICBwbGF5ZXJDb2xsaWRlcjogcGxheWVyLmNvbnRyb2xzLmNvbGxpc2lvblJlY2VpdmVyLFxuICAgIGNvbXBvbmVudHM6IFtmZXJuMS5jb250cm9scy5jb2xsaWRlciwgZmVybjIuY29udHJvbHMuY29sbGlkZXIsIGZlcm4zLmNvbnRyb2xzLmNvbGxpZGVyLCBmZXJuNC5jb250cm9scy5jb2xsaWRlciwgZmVybjUuY29udHJvbHMuY29sbGlkZXIsIHByb3RvMS5jb250cm9scy5jb2xsaWRlciwgcHJvdG8yLmNvbnRyb2xzLmNvbGxpZGVyLCBwcm90bzMuY29udHJvbHMuY29sbGlkZXJdLFxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZHQpe1xuICAgICAgICB2YXIgcGxheWVyQm94XG4gICAgICAgIHZhciBvdGhlckJveFxuICAgICAgICB2YXIgcGxheWVyUG9zXG4gICAgICAgIHZhciBvdGhlclBvc1xuICAgICAgICB2YXIgcGxheWVyQm91bmQgPSBbXVxuICAgICAgICB2YXIgb3RoZXJCb3VuZCA9IFtdXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb21wb25lbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHBsYXllckJveCA9IHRoaXMucGxheWVyQ29sbGlkZXIuaGl0Qm94XG4gICAgICAgICAgICBwbGF5ZXJQb3MgPSB0aGlzLnBsYXllckNvbGxpZGVyLm93bmVyLmNvbnRyb2xzLnRyYW5zZm9ybS5wb3NpdGlvblxuICAgICAgICAgICAgcGxheWVyQm91bmRbMF0gPSBwbGF5ZXJCb3hbMF0gKyBwbGF5ZXJQb3NbMF1cbiAgICAgICAgICAgIHBsYXllckJvdW5kWzJdID0gcGxheWVyQm94WzJdICsgcGxheWVyUG9zWzBdXG4gICAgICAgICAgICBwbGF5ZXJCb3VuZFsxXSA9IHBsYXllckJveFsxXSArIHBsYXllclBvc1sxXVxuICAgICAgICAgICAgcGxheWVyQm91bmRbM10gPSBwbGF5ZXJCb3hbM10gKyBwbGF5ZXJQb3NbMV1cblxuICAgICAgICAgICAgb3RoZXJCb3ggPSB0aGlzLmNvbXBvbmVudHNbaV0uaGl0Qm94XG4gICAgICAgICAgICBvdGhlclBvcyA9IHRoaXMuY29tcG9uZW50c1tpXS5vd25lci5jb250cm9scy50cmFuc2Zvcm0ucG9zaXRpb25cbiAgICAgICAgICAgIG90aGVyQm91bmRbMF0gPSBvdGhlckJveFswXSArIG90aGVyUG9zWzBdXG4gICAgICAgICAgICBvdGhlckJvdW5kWzJdID0gb3RoZXJCb3hbMl0gKyBvdGhlclBvc1swXVxuICAgICAgICAgICAgb3RoZXJCb3VuZFsxXSA9IG90aGVyQm94WzFdICsgb3RoZXJQb3NbMV1cbiAgICAgICAgICAgIG90aGVyQm91bmRbM10gPSBvdGhlckJveFszXSArIG90aGVyUG9zWzFdXG5cbiAgICAgICAgICAgIGlmIChpc0NvbGxpZGluZyhwbGF5ZXJCb3VuZCwgb3RoZXJCb3VuZCkpe1xuICAgICAgICAgICAgICAgIHBsYXllci5jb250cm9scy5jb2xsaXNpb25SZWNlaXZlci5vbkhpdCh0aGlzLmNvbXBvbmVudHNbaV0pXG4gICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzW2ldLm9uSGl0KClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gU3RhdGUgYXNzaWdubWVudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5nYW1lLmNoYW5nZVN0YXRlKHRpdGxlU2NyZWVuKVxucGxheWVyLmNoYW5nZVN0YXRlKGp1bXApXG5wbGF5ZXIuY29udHJvbHMuYWx0aXR1ZGUuZ2xpZGluZyA9IGZhbHNlXG5mZXJuMS5jaGFuZ2VTdGF0ZShpbmFjdGl2ZU9ic3RhY2xlKVxuZmVybjIuY2hhbmdlU3RhdGUoaW5hY3RpdmVPYnN0YWNsZSlcbmZlcm4zLmNoYW5nZVN0YXRlKGluYWN0aXZlT2JzdGFjbGUpXG5mZXJuNC5jaGFuZ2VTdGF0ZShpbmFjdGl2ZU9ic3RhY2xlKVxuZmVybjUuY2hhbmdlU3RhdGUoaW5hY3RpdmVPYnN0YWNsZSlcbnByb3RvMS5jaGFuZ2VTdGF0ZShpbmFjdGl2ZU9ic3RhY2xlKVxucHJvdG8yLmNoYW5nZVN0YXRlKGluYWN0aXZlT2JzdGFjbGUpXG5wcm90bzMuY2hhbmdlU3RhdGUoaW5hY3RpdmVPYnN0YWNsZSlcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbi8vIEtleSBsaXN0ZW5lcnMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxudmFyIGtleURvd24gPSBmYWxzZVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBlID0+IHtcbiAgICBpZiAoa2V5RG93biA9PSBmYWxzZSAmJiBlLmtleUNvZGUgPT0gMzIpe1xuICAgICAgICBpZiAoZ2FtZS5jdXJyZW50U3RhdGUgPT0gbG9zZSl7XG4gICAgICAgICAgICByZXN0YXJ0KClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBsYXllci5tZXNzYWdlKFwianVtcFwiKVxuICAgICAgICAgICAga2V5RG93biA9IHRydWVcbiAgICAgICAgfVxuICAgIH1cbn0pXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBlID0+IHtcbiAgICBpZiAoa2V5RG93biA9PSB0cnVlICYmIGUua2V5Q29kZSA9PSAzMil7XG4gICAgICAgIHBsYXllci5tZXNzYWdlKFwiZmFsbFwiKVxuICAgICAgICBrZXlEb3duID0gZmFsc2VcbiAgICB9XG59KVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBlID0+IHtcbiAgICBpZiAoa2V5RG93biA9PSBmYWxzZSl7XG4gICAgICAgIGlmIChnYW1lLmN1cnJlbnRTdGF0ZSA9PSBsb3NlKXtcbiAgICAgICAgICAgIHJlc3RhcnQoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGxheWVyLm1lc3NhZ2UoXCJqdW1wXCIpXG4gICAgICAgICAgICBrZXlEb3duID0gdHJ1ZVxuICAgICAgICB9XG4gICAgfVxufSlcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGUgPT4ge1xuICAgIGlmIChrZXlEb3duID09IHRydWUpe1xuICAgICAgICBwbGF5ZXIubWVzc2FnZShcImZhbGxcIilcbiAgICAgICAga2V5RG93biA9IGZhbHNlXG4gICAgfVxufSlcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBHYW1lIGxvb3AgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbnZhciBiZ1ggPSAwXG52YXIgZmdYID0gMFxuXG5mdW5jdGlvbiB0aWNrKHRpbWVzdGFtcCl7XG4gICAgbG9vcCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKTtcbiAgICBpZiAoIWxhc3RUaW1lKXtcbiAgICAgICAgbGFzdFRpbWUgPSB0aW1lc3RhbXBcbiAgICB9XG4gICAgdmFyIGR0ID0gdGltZXN0YW1wIC0gbGFzdFRpbWVcbiAgICBjdXJyZW50VGltZSA9IHRpbWVzdGFtcFxuICAgIGdhbWUudXBkYXRlKGR0KTtcbiAgICBsYXN0VGltZSA9IHRpbWVzdGFtcFxuICAgIGJnWCA9IChiZ1ggLSAzICogKGR0LzMwKSkgJSA2NDBcbiAgICBiZzEuc3R5bGUubGVmdCA9IGAke2JnWH1weGBcbiAgICBmZ1ggPSAoZmdYIC0gZmdTY3JvbGxTcGVlZCAqIGR0ICogMikgJSA2NDBcbiAgICBmZzEuc3R5bGUubGVmdCA9IGAke2ZnWH1weGBcblxufVxuXG5mdW5jdGlvbiByZXN0YXJ0KCl7XG4gICAgbGFzdFRpbWUgPSBudWxsXG4gICAgY3VycmVudFNjb3JlID0gMFxuICAgIG9ic3RhY2xlRnJlcXVlbmN5ID0gMC4yXG4gICAgZmdTY3JvbGxTcGVlZCA9IDAuMTJcbiAgICBuZXh0U2NvcmVNaWxlc3RvbmUgPSA1MFxuICAgIHNjb3JlYm9hcmQuaW5uZXJIVE1MID0gYFNDT1JFOiAke01hdGguZmxvb3IoY3VycmVudFNjb3JlKX1gXG4gICAgcGxheWVyLmNvbnRyb2xzLnRyYW5zZm9ybS5wb3NpdGlvbiA9IFs0MCwgMTI1XVxuICAgIGdhbWUuY2hhbmdlU3RhdGUocGxheSlcbiAgICBwbGF5ZXIuY2hhbmdlU3RhdGUoanVtcClcbiAgICBwbGF5ZXIuY29udHJvbHMuYWx0aXR1ZGUuZ2xpZGluZyA9IGZhbHNlXG4gICAgbWVzc2FnZVdpbmRvdy5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIlxuICAgIGdhbWUuY2hhbmdlU3RhdGUocGxheSlcbiAgICBsb29wID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spXG5cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBTdGFydCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cblxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIEV4cG9ydCBtb2R1bGUgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxubW9kdWxlLmV4cG9ydHMgPSB7R2FtZU9iamVjdH1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ]);